import logging
import os
import time
from threading import Thread
import asyncio
from datetime import datetime, timezone
from collections import defaultdict
from functools import wraps
import json

import psycopg2
from urllib.parse import urlparse

from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, constants
from telegram.ext import (
    Application,
    ApplicationBuilder, # ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ApplicationBuilder –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.error import BadRequest

# --- ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.environ.get('DATABASE_URL')
MY_ADMIN_ID = os.environ.get('MY_ADMIN_ID', '0')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
TELEGRAM_WEBHOOK_PATH = os.environ.get('TELEGRAM_WEBHOOK_PATH', 'telegram')

# --- ü™µ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    MY_ADMIN_ID = int(MY_ADMIN_ID)
except ValueError:
    logger.error("MY_ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ö–æ–º–∞–Ω–¥–∞ /clear_all_debts –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    MY_ADMIN_ID = 0

# --- üé® –≠–ú–û–î–ó–ò –ò –°–¢–†–û–ö–ò ---
EMOJI = {
    "money": "üí∞", "repay": "üí∏", "split": "üçï", "status": "üìä",
    "my_debts": "üë§", "history": "üìú", "ok": "‚úÖ", "cancel": "‚ùå",
    "back": "‚Ü©Ô∏è", "user": "üë§", "warning": "‚ö†Ô∏è", "party": "üéâ"
}
RUSSIAN_MONTHS_NOM = ["", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]

# --- üî¢ –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –î–ò–ê–õ–û–ì–û–í ---
(SELECT_CREDITOR, SELECT_DEBTOR, GET_AMOUNT, GET_COMMENT) = range(4)
(REPAY_SELECT_DEBTOR, REPAY_SELECT_CREDITOR, REPAY_GET_AMOUNT) = range(4, 7)
(SPLIT_SELECT_PAYER, SPLIT_GET_AMOUNT, SPLIT_GET_COMMENT) = range(7, 10)
CONFIRM_CLEAR = 10

# --- üóÉÔ∏è –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (PostgreSQL) ---
class Database:
    def __init__(self, conn_url):
        if not conn_url:
            raise ValueError("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ Environment Variables.")
        self.conn_url = conn_url
        self.conn = None
        self._connect()
        self.init_db()

    def _connect(self):
        logger.info("Connecting to PostgreSQL database...")
        try:
            result = urlparse(self.conn_url)
            self.conn = psycopg2.connect(
                dbname=result.path[1:],
                user=result.username,
                password=result.password,
                host=result.hostname,
                port=result.port,
                sslmode='require'
            )
            logger.info("Database connection successful.")
        except psycopg2.OperationalError as e:
            logger.critical(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï: {e}")
            raise

    def execute(self, query, params=(), fetch=None, retries=3):
        for i in range(retries):
            try:
                if self.conn is None or self.conn.closed:
                    self._connect()
                with self.conn.cursor() as cur:
                    cur.execute(query, params)
                    self.conn.commit()
                    if fetch == "one":
                        return cur.fetchone()
                    if fetch == "all":
                        return cur.fetchall()
                return None
            except (psycopg2.InterfaceError, psycopg2.OperationalError) as e:
                logger.warning(f"Database connection lost ({e}). Attempting to reconnect (retry {i+1}/{retries})...")
                self._connect()
            except psycopg2.Error as e:
                logger.error(f"PostgreSQL error during query '{query}': {e}")
                self.conn.rollback()
                raise
        logger.error(f"Failed to execute query after {retries} attempts.")
        raise psycopg2.OperationalError("Failed to execute query after multiple retries.")

    def init_db(self):
        self.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT, chat_id BIGINT, first_name TEXT,
                username TEXT, PRIMARY KEY (user_id, chat_id)
            )
        """)
        self.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY, chat_id BIGINT, creditor_id BIGINT,
                debtor_id BIGINT, amount REAL, comment TEXT, timestamp TIMESTAMPTZ
            )
        """)

    async def register_user(self, user: User, chat_id: int):
        query = "INSERT INTO users (user_id, chat_id, first_name, username) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id, chat_id) DO NOTHING"
        params = (user.id, chat_id, user.first_name, user.username or f"User{user.id}")
        self.execute(query, params)

    def get_group_members(self, chat_id: int):
        return self.execute("SELECT user_id, first_name FROM users WHERE chat_id = %s", (chat_id,), fetch="all")

    def get_user_name(self, user_id, chat_id):
        try:
            res = self.execute("SELECT first_name FROM users WHERE user_id=%s AND chat_id=%s", (user_id, chat_id), fetch="one")
            if res and len(res) > 0:
                return res[0]
            logger.warning(f"User {user_id} not found in 'users' table for chat {chat_id}. Returning '???'.")
            return "???"
        except Exception as e:
            logger.error(f"Failed to retrieve user name for user_id={user_id}, chat_id={chat_id}: {e}")
            return "???"

    def add_transaction(self, chat_id, c_id, d_id, amount, comment):
        query = "INSERT INTO transactions (chat_id, creditor_id, debtor_id, amount, comment, timestamp) VALUES (%s, %s, %s, %s, %s, %s)"
        params = (chat_id, c_id, d_id, amount, comment, datetime.now(timezone.utc))
        self.execute(query, params)

    def get_all_transactions(self, chat_id):
        return self.execute("SELECT id, creditor_id, debtor_id, amount, comment, timestamp FROM transactions WHERE chat_id=%s ORDER BY timestamp ASC", (chat_id,), fetch="all")

    def clear_transactions_for_chat(self, chat_id: int):
        self.execute("DELETE FROM transactions WHERE chat_id = %s", (chat_id,))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –∏ Application (–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã) ---
app = Flask(__name__)
db: Database = None
application_instance: Application = None # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

# --- üßë‚Äçüîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def group_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not update.effective_chat or update.effective_chat.type == "private":
            text = f"{EMOJI['warning']} –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
            if update.callback_query:
                await update.callback_query.answer(text, show_alert=True)
            else:
                await update.message.reply_text(text)
            return ConversationHandler.END if 'conv' in str(func.__name__) else None
        if update.effective_user:
            await db.register_user(update.effective_user, update.effective_chat.id)
        return await func(update, context, *args, **kwargs)
    return wrapped

def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(f'\{char}' if char in escape_chars else char for char in str(text))

def get_user_mention(user_id, chat_id):
    name = db.get_user_name(user_id, chat_id)
    return f"[{escape_markdown(name)}](tg://user?id={user_id})"

def calculate_balances(chat_id: int):
    direct_debts = defaultdict(float)

    transactions = db.get_all_transactions(chat_id)
    for _, creditor_id, debtor_id, amount, _, _ in transactions:
        direct_debts[(debtor_id, creditor_id)] += float(amount)

    net_debts = defaultdict(float)
    processed_pairs = set()

    for (d1, c1), amount1 in direct_debts.items():
        if (d1, c1) in processed_pairs:
            continue

        amount2 = direct_debts.get((c1, d1), 0.0)

        if amount1 > amount2:
            net_amount = amount1 - amount2
            if net_amount > 0.005:
                net_debts[(d1, c1)] = net_amount
        elif amount2 > amount1:
            net_amount = amount2 - amount1
            if net_amount > 0.005:
                net_debts[(c1, d1)] = net_amount
        
        processed_pairs.add((d1, c1))
        processed_pairs.add((c1, d1))
            
    return net_debts

# --- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ò–ê–õ–û–ì–ê–ú–ò ---

async def send_main_menu(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['money']} –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥", callback_data="add_debt"), InlineKeyboardButton(f"{EMOJI['repay']} –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥", callback_data="repay")],
        [InlineKeyboardButton(f"{EMOJI['split']} –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—á–µ—Ç", callback_data="split"), InlineKeyboardButton(f"{EMOJI['status']} –ë–∞–ª–∞–Ω—Å", callback_data="status")],
        [InlineKeyboardButton(f"{EMOJI['my_debts']} –ú–æ–∏ –¥–æ–ª–≥–∏", callback_data="my_debts"), InlineKeyboardButton(f"{EMOJI['history']} –ò—Å—Ç–æ—Ä–∏—è", callback_data="history_menu")]
    ]
    await context.bot.send_message(chat_id, "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º:", reply_markup=InlineKeyboardMarkup(keyboard))

@group_only
async def start_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        try:
            await update.callback_query.message.edit_text("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{EMOJI['money']} –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥", callback_data="add_debt"), InlineKeyboardButton(f"{EMOJI['repay']} –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥", callback_data="repay")],
                [InlineKeyboardButton(f"{EMOJI['split']} –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—á–µ—Ç", callback_data="split"), InlineKeyboardButton(f"{EMOJI['status']} –ë–∞–ª–∞–Ω—Å", callback_data="status")],
                [InlineKeyboardButton(f"{EMOJI['my_debts']} –ú–æ–∏ –¥–æ–ª–≥–∏", callback_data="my_debts"), InlineKeyboardButton(f"{EMOJI['history']} –ò—Å—Ç–æ—Ä–∏—è", callback_data="history_menu")]
            ]))
        except BadRequest:
            await send_main_menu(update.effective_chat.id, context)
        await update.callback_query.answer()
    else:
        await send_main_menu(update.effective_chat.id, context)

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        try: await update.callback_query.message.delete()
        except BadRequest: pass
    elif context.user_data.get('dialog_message_id'):
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['dialog_message_id'])
        except BadRequest: pass
    context.user_data.clear()
    await send_main_menu(update.effective_chat.id, context)
    return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: await update.message.delete()
    except BadRequest: pass
    if not context.user_data.get('dialog_message_id'):
        await send_main_menu(update.effective_chat.id, context)
    return ConversationHandler.END

async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start_menu_command(update, context)


# --- üíµ –î–ò–ê–õ–û–ì: –î–û–ë–ê–í–ò–¢–¨ –î–û–õ–ì ---
@group_only
async def add_debt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    try: await query.message.delete()
    except BadRequest: pass
    members = db.get_group_members(query.message.chat_id)
    if len(members) < 2:
        await context.bot.send_message(query.message.chat_id, f"{EMOJI['warning']} –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞.")
        await send_main_menu(query.message.chat_id, context)
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{uid}")] for uid, name in members] + [[InlineKeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    msg = await context.bot.send_message(query.message.chat_id, "üí∞ –ö—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª?", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['dialog_message_id'] = msg.message_id
    return SELECT_CREDITOR

async def add_debt_select_creditor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['creditor_id'] = int(query.data.split('_')[1])
    members = db.get_group_members(query.message.chat_id)
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{uid}")] for uid, name in members if uid != context.user_data['creditor_id']] + [[InlineKeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await context.bot.edit_message_text("–ó–∞ –∫–æ–≥–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∏?", chat_id=query.message.chat_id, message_id=context.user_data['dialog_message_id'], reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_DEBTOR

async def add_debt_select_debtor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['debtor_id'] = int(query.data.split('_')[1])
    await context.bot.edit_message_text("–ö–∞–∫–∞—è —Å—É–º–º–∞?", chat_id=query.message.chat_id, message_id=context.user_data['dialog_message_id'])
    return GET_AMOUNT

async def add_debt_get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0: raise ValueError
        context.user_data['amount'] = amount
        try: await update.message.delete()
        except BadRequest: pass
        await context.bot.edit_message_text("–ó–∞ —á—Ç–æ? (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip)", chat_id=update.effective_chat.id, message_id=context.user_data['dialog_message_id'])
        return GET_COMMENT
    except (ValueError, TypeError):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", quote=True)
        return GET_AMOUNT

async def add_debt_save(update: Update, context: ContextTypes.DEFAULT_TYPE, is_skip=False):
    comment = "" if is_skip else update.message.text
    try: await update.message.delete()
    except BadRequest: pass
    db.add_transaction(update.effective_chat.id, context.user_data['creditor_id'], context.user_data['debtor_id'], context.user_data['amount'], comment)
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['dialog_message_id'])
    await send_main_menu(update.effective_chat.id, context)
    return ConversationHandler.END

# --- üí∏ –î–ò–ê–õ–û–ì: –í–ï–†–ù–£–¢–¨ –î–û–õ–ì ---
@group_only
async def repay_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    try: await query.message.delete()
    except BadRequest: pass
    members = db.get_group_members(query.message.chat_id)
    if len(members) < 2:
        await context.bot.send_message(query.message.chat_id, f"{EMOJI['warning']} –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞.")
        await send_main_menu(query.message.chat_id, context)
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{uid}")] for uid, name in members] + [[InlineKeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    msg = await context.bot.send_message(query.message.chat_id, "üí∏ –ö—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–≥?", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['dialog_message_id'] = msg.message_id
    return REPAY_SELECT_DEBTOR

async def repay_select_debtor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['debtor_id'] = int(query.data.split('_')[1])
    members = db.get_group_members(query.message.chat_id)
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{uid}")] for uid, name in members if uid != context.user_data['debtor_id']] + [[InlineKeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await context.bot.edit_message_text("–ö–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç?", chat_id=query.message.chat_id, message_id=context.user_data['dialog_message_id'], reply_markup=InlineKeyboardMarkup(keyboard))
    return REPAY_SELECT_CREDITOR

async def repay_select_creditor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['creditor_id'] = int(query.data.split('_')[1])
    await context.bot.edit_message_text("–ö–∞–∫—É—é —Å—É–º–º—É –≤–µ—Ä–Ω—É–ª–∏?", chat_id=query.message.chat_id, message_id=context.user_data['dialog_message_id'])
    return REPAY_GET_AMOUNT

async def repay_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0: raise ValueError
        try: await update.message.delete()
        except BadRequest: pass
        db.add_transaction(update.effective_chat.id, context.user_data['debtor_id'], context.user_data['creditor_id'], amount, "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞")
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['dialog_message_id'])
        await send_main_menu(update.effective_chat.id, context)
        return ConversationHandler.END
    except (ValueError, TypeError):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", quote=True)
        return REPAY_GET_AMOUNT

# --- üçï –î–ò–ê–õ–û–ì: –†–ê–ó–î–ï–õ–ò–¢–¨ –°–ß–ï–¢ ---
@group_only
async def split_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    try: await query.message.delete()
    except BadRequest: pass
    members = db.get_group_members(query.message.chat_id)
    if len(members) < 2:
        await context.bot.send_message(query.message.chat_id, f"{EMOJI['warning']} –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.")
        await send_main_menu(query.message.chat_id, context)
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(name, callback_data=f"user_{uid}")] for uid, name in members] + [[InlineKeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    msg = await context.bot.send_message(query.message.chat_id, "üçï –ö—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –≤—Å–µ—Ö?", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['dialog_message_id'] = msg.message_id
    return SPLIT_SELECT_PAYER

async def split_select_payer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['payer_id'] = int(query.data.split('_')[1])
    await context.bot.edit_message_text("–ö–∞–∫–∞—è –æ–±—â–∞—è —Å—É–º–º–∞ —Å—á–µ—Ç–∞?", chat_id=query.message.chat_id, message_id=context.user_data['dialog_message_id'])
    return SPLIT_GET_AMOUNT

async def split_get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0: raise ValueError
        context.user_data['amount'] = amount
        try: await update.message.delete()
        except BadRequest: pass
        await context.bot.edit_message_text("–ó–∞ —á—Ç–æ? (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ /skip)", chat_id=update.effective_chat.id, message_id=context.user_data['dialog_message_id'])
        return SPLIT_GET_COMMENT
    except (ValueError, TypeError):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", quote=True)
        return SPLIT_GET_AMOUNT

async def split_save(update: Update, context: ContextTypes.DEFAULT_TYPE, is_skip=False):
    comment = "" if is_skip else update.message.text
    try: await update.message.delete()
    except BadRequest: pass
    chat_id, payer_id, total_amount = update.effective_chat.id, context.user_data['payer_id'], context.user_data['amount']
    members = db.get_group_members(chat_id)
    if len(members) > 1:
        amount_per_person = total_amount / len(members)
        for debtor_id, _ in members:
            if debtor_id != payer_id:
                db.add_transaction(chat_id, payer_id, debtor_id, amount_per_person, comment)
    await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data['dialog_message_id'])
    await send_main_menu(update.effective_chat.id, context)
    return ConversationHandler.END


# --- ‚ú® –§–£–ù–ö–¶–ò–ò –ë–ï–ó –î–ò–ê–õ–û–ì–û–í ---
@group_only
async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, chat_id = update.callback_query, update.effective_chat.id
    net_debts = calculate_balances(chat_id)
    text = f"*{EMOJI['status']} –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
    if not net_debts: text += f"{EMOJI['party']} –í—Å–µ –≤ —Ä–∞—Å—á–µ—Ç–µ\\!"
    else:
        for (d_id, c_id), amount in net_debts.items():
            text += f"{get_user_mention(d_id, chat_id)} –¥–æ–ª–∂–µ–Ω {get_user_mention(c_id, chat_id)} *{escape_markdown(f'{amount:.2f}')} UAH*\n"
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]), parse_mode=constants.ParseMode.MARKDOWN_V2)
    await query.answer()

@group_only
async def my_debts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, user_id, chat_id = update.callback_query, update.effective_user.id, update.effective_chat.id
    net_debts, i_owe, owe_me = calculate_balances(chat_id), "", ""
    for (d_id, c_id), amount in net_debts.items():
        if d_id == user_id: i_owe += f" ‚Ä¢ {get_user_mention(c_id, chat_id)}: *{escape_markdown(f'{amount:.2f}')} UAH*\n"
        if c_id == user_id: owe_me += f" ‚Ä¢ {get_user_mention(d_id, chat_id)}: *{escape_markdown(f'{amount:.2f}')} UAH*\n"
    text = f"*{EMOJI['my_debts']} –ú–æ—è —Å–≤–æ–¥–∫–∞:*\n\n*–Ø –¥–æ–ª–∂–µ–Ω:*\n{i_owe or escape_markdown('–ù–∏–∫–æ–º—É.')}\n\n*–ú–Ω–µ –¥–æ–ª–∂–Ω—ã:*\n{owe_me or escape_markdown('–ù–∏–∫—Ç–æ.')}"
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]), parse_mode=constants.ParseMode.MARKDOWN_V2)
    await query.answer()

@group_only
async def history_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, chat_id = update.callback_query, update.effective_chat.id
    transactions_raw = db.get_all_transactions(chat_id)
    
    if not transactions_raw:
        await query.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", show_alert=True)
        return
    
    months = set()
    for t in transactions_raw:
        ts_obj = t[5]
        if not isinstance(ts_obj, datetime):
            logger.warning(f"Timestamp {ts_obj} (type {type(ts_obj)}) for transaction ID {t[0]} is not datetime. Attempting to convert for history menu.")
            try:
                ts_obj = datetime.fromisoformat(str(ts_obj))
            except ValueError:
                logger.error(f"Failed to convert timestamp {t[5]} to datetime for history menu, transaction ID {t[0]}. Skipping this transaction.")
                continue
        months.add(ts_obj.strftime("%Y-%m"))

    sorted_months = sorted(list(months), reverse=True)
    keyboard = []
    for m in sorted_months:
        dt_object = datetime.strptime(m, '%Y-%m')
        keyboard.append([InlineKeyboardButton(f"{RUSSIAN_MONTHS_NOM[dt_object.month]} {dt_object.year}", callback_data=f"history_show_{m}")])
    
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(keyboard + [[InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]))
    await query.answer()

@group_only
async def history_show_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query, chat_id = update.callback_query, update.effective_chat.id
    year_month = query.data.split('_')[-1]
    year, month = map(int, year_month.split('-'))

    processed_transactions = []
    for tx in db.get_all_transactions(chat_id):
        tx_id, c_id, d_id, amount, comment, raw_ts = tx
        
        current_ts_obj = None
        if isinstance(raw_ts, datetime):
            current_ts_obj = raw_ts
        else:
            logger.warning(f"Timestamp {raw_ts} (type {type(raw_ts)}) for transaction ID {tx_id} is not datetime. Attempting to convert.")
            try:
                current_ts_obj = datetime.fromisoformat(str(raw_ts))
            except ValueError:
                logger.error(f"Failed to convert timestamp {raw_ts} to datetime for transaction ID {tx_id}. Skipping this transaction.")
                continue

        if current_ts_obj and current_ts_obj.year == year and current_ts_obj.month == month: # –ü—Ä–æ–≤–µ—Ä–∫–∞ current_ts_obj –Ω–∞ None
            processed_transactions.append((tx_id, c_id, d_id, amount, comment, current_ts_obj))
    
    text_header = f"*{EMOJI['history']} –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {escape_markdown(RUSSIAN_MONTHS_NOM[month])} {year}*\n\n"
    text_body = ""

    if not processed_transactions:
        text_body += escape_markdown("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.") + "\n"
    else:
        for _, c_id, d_id, amount, comment, ts_obj in processed_transactions:
            date_str = escape_markdown(ts_obj.strftime('%d.%m'))
            amount_str = escape_markdown(f'{amount:.2f}')
            
            if comment == "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞":
                text_body += f"`{date_str}`: {get_user_mention(d_id, chat_id)} –ø–æ–≥–∞—Å–∏–ª(–∞) –¥–æ–ª–≥ {get_user_mention(c_id, chat_id)} –Ω–∞ *{amount_str} UAH*\n"
            else:
                comment_escaped = escape_markdown(comment if comment is not None else "")
                final_comment_part = f" \\({comment_escaped}\\)" if comment_escaped else ""
                text_body += f"`{date_str}`: {get_user_mention(d_id, chat_id)} –∑–∞–Ω—è–ª(–∞) —É {get_user_mention(c_id, chat_id)} –Ω–∞ *{amount_str} UAH*{final_comment_part}\n"
    
    final_text = text_header + text_body

    await query.message.edit_text(
        final_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['back']} –ö –º–µ—Å—è—Ü–∞–º", callback_data="history_menu")]]),
        parse_mode=constants.ParseMode.MARKDOWN_V2
    )
    await query.answer()

# --- ‚úÖ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ò–°–¢–û–†–ò–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ---
@group_only
async def clear_transactions_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id != MY_ADMIN_ID:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="confirm_clear_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="confirm_clear_no")]
    ]
    await update.message.reply_text(
        f"{EMOJI['warning']} *–í–ù–ò–ú–ê–ù–ò–ï!* {EMOJI['warning']}\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *–í–°–ï* —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=constants.ParseMode.MARKDOWN_V2
    )
    return CONFIRM_CLEAR

async def clear_transactions_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    
    if query.data == "confirm_clear_yes":
        chat_id = update.effective_chat.id
        db.clear_transactions_for_chat(chat_id)
        await query.message.edit_text("‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        await send_main_menu(chat_id, context)
    else:
        await query.message.edit_text("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
        except BadRequest:
            logger.error("Failed to send error message to user, original message deleted or inaccessible.")
    else:
        logger.error("Error occurred, but no effective message to reply to.")

# --- Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
@app.route('/')
def home():
    return "I'm alive!"

@app.post(f"/{TELEGRAM_WEBHOOK_PATH}")
async def telegram_webhook_handler():
    global application_instance # –î–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if application_instance is None:
        logger.error("Telegram Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ Flask-–≤–æ—Ä–∫–µ—Ä–∞.")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
            # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è Gunicorn, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã:
            # –∫–∞–∂–¥—ã–π —Ñ–æ—Ä–∫–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –Ω–µ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
            application_instance = await _initialize_bot_internal()
            if application_instance is None:
                logger.critical("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–µ–±—Ö—É–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                return "Error: Bot not ready after re-init", 500
            logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            return "Error: Critical bot re-init failure", 500

    try:
        update = Update.de_json(request.get_json(force=True), application_instance.bot)
        await application_instance.post_update(update) 
        return "ok"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        return "Error", 500

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
async def _initialize_bot_internal() -> Application | None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("!!! –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return None
    if not DATABASE_URL:
        logger.critical("!!! –û–®–ò–ë–ö–ê: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ Environment Variables.")
        return None
    if not WEBHOOK_URL:
        logger.critical("!!! –û–®–ò–ë–ö–ê: WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ WEBHOOK_URL –≤ Environment Variables (URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Render).")
        return None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    logger.info("Telegram Application builder –∑–∞–ø—É—â–µ–Ω.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
    try:
        global db # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'db'
        db = Database(DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e: # –õ–æ–≤–∏–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
        logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return None # –ï—Å–ª–∏ –ë–î —É–ø–∞–ª–∞, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_fallbacks = [CallbackQueryHandler(end_conversation, pattern="^cancel$", per_message=True), CommandHandler('cancel', cancel_command)]

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PTBUserWarning: –¥–æ–±–∞–≤–ª—è–µ–º per_message=True –∫ CallbackQueryHandler'–∞–º
    add_debt_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_debt_start, pattern="^add_debt$", per_message=True)],
        states={
            SELECT_CREDITOR: [CallbackQueryHandler(add_debt_select_creditor, pattern=r"^user_\d+$", per_message=True)],
            SELECT_DEBTOR: [CallbackQueryHandler(add_debt_select_debtor, pattern=r"^user_\d+$", per_message=True)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_debt_get_amount)],
            GET_COMMENT: [CommandHandler('skip', lambda u,c: add_debt_save(u,c,True)), MessageHandler(filters.TEXT & ~filters.COMMAND, add_debt_save)]
        }, fallbacks=conv_fallbacks, per_user=True
    )
    repay_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(repay_start, pattern="^repay$", per_message=True)],
        states={
            REPAY_SELECT_DEBTOR: [CallbackQueryHandler(repay_select_debtor, pattern=r"^user_\d+$", per_message=True)],
            REPAY_SELECT_CREDITOR: [CallbackQueryHandler(repay_select_creditor, pattern=r"^user_\d+$", per_message=True)],
            REPAY_GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, repay_save)]
        }, fallbacks=conv_fallbacks, per_user=True
    )
    split_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(split_start, pattern="^split$", per_message=True)],
        states={
            SPLIT_SELECT_PAYER: [CallbackQueryHandler(split_select_payer, pattern=r"^user_\d+$", per_message=True)],
            SPLIT_GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, split_get_amount)],
            SPLIT_GET_COMMENT: [CommandHandler('skip', lambda u,c: split_save(u,c,True)), MessageHandler(filters.TEXT & ~filters.COMMAND, split_save)]
        }, fallbacks=conv_fallbacks, per_user=True
    )
    clear_handler = ConversationHandler(
        entry_points=[CommandHandler("clear_all_debts", clear_transactions_start)],
        states={ CONFIRM_CLEAR: [CallbackQueryHandler(clear_transactions_confirm, pattern=r"^confirm_clear_(yes|no)$", per_message=True)] },
        fallbacks=[CommandHandler('cancel', clear_transactions_start)], per_user=True
    )

    application.add_handler(CommandHandler(["start", "menu"], start_menu_command))
    application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))
    
    application.add_handler(add_debt_handler)
    application.add_handler(repay_handler)
    application.add_handler(split_handler)
    application.add_handler(clear_handler)
    
    application.add_handler(CallbackQueryHandler(status_handler, pattern="^status$"))
    application.add_handler(CallbackQueryHandler(my_debts_handler, pattern="^my_debts$"))
    
    application.add_handler(CallbackQueryHandler(history_menu_handler, pattern="^history_menu$"))
    # history_show_handler —Ç–æ–∂–µ CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(history_show_handler, pattern=r"^history_show_", per_message=True)) 

    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
    await application.bot.delete_webhook()
    full_webhook_url = f"{WEBHOOK_URL}{TELEGRAM_WEBHOOK_PATH}"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {full_webhook_url}")
    await application.bot.set_webhook(url=full_webhook_url)

    # –ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
    await application.post_init()
    
    logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è Gunicorn.")
    return application # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Application


if __name__ == "__main__":
    # –≠—Ç–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∫–æ–≥–¥–∞ `python main.py` –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è Render/Gunicorn.
    # –û–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'application_instance'.
    application_instance = asyncio.run(_initialize_bot_internal())

    if application_instance is None:
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        # sys.exit(1) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å Render –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç.
    else:
        logger.info("–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'application_instance' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        db_ping_thread = Thread(target=ping_database)
        db_ping_thread.daemon = True
        db_ping_thread.start()
